<<<<<<< HEAD
}
target_top5_hist <- ggplot(target_scores, aes(top5_MAUI)) +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size)) +
geom_density() +
geom_line(aes(y = norm_curve), data = target_curve_top5, colour = "red")
plot(target_top5_hist)
plot(target_MAUI_hist)
plot(target_UI_hist)
plot(p_UI_hist)
plot(p_MAUI_hist)
plot(response_trees)
plot(MAUI_trees)
plot(UI_trees)
plot(mass_graph)
library(tidyverse)
library(ggplot2)
library(foreach)
#' cdfs for entire sample
score_freq <- read_csv('data/score_frequencies.csv') %>%
select(-X1)
total_mass <- score_freq %>%
group_by(TypeItem, sample_size) %>%
summarise(item_mass = max(cum_mass))
score_freq <- score_freq %>%
left_join(total_mass) %>%
mutate(mass_weight = mass/item_mass)
mass_graph <- ggplot(score_freq) +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size)) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red') +
geom_hline(yintercept = .95)
response_trees <- ggplot(score_freq, aes(x = factor(sample_size), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
facet_grid(rows = vars(TypeItem))
MAUI_trees <- ggplot(score_freq, aes(x = factor(sample_size), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
facet_grid(rows = vars(TypeItem))
UI_trees <- ggplot(score_freq, aes(x = factor(sample_size), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
facet_grid(rows = vars(TypeItem))
#'histograms for all participants
p_scores <- read_csv('data/participant_scores.csv') %>%
select(-X1)
p_UI_hist <- ggplot(p_scores, aes(sum_UI95)) +
geom_histogram() +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size))
p_MAUI_hist <- ggplot(p_scores, aes(sum_MAUI)) +
geom_histogram() +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size))
p_topMAUI_hist <- ggplot(p_scores, aes(top5_MAUI)) +
geom_histogram() +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size))
#' histograms for only target sample
#' including overlaying normal distributions
target_scores <- read_csv('data/target_participant_scores.csv') %>%
select(-X1)
target_grid <- function(meas) {
val <- enquo(meas)
ts <- target_scores %>%
select(TypeItem, sample_size, !!val) %>%
summarise(max = max(!!val),
min = min(!!val))
seq(ts$min, ts$max, length = 100)
}
target_dens_UI <- target_scores %>%
group_by(TypeItem, sample_size) %>%
summarise(mean = mean(sum_UI95),
sd = sd(sum_UI95))
norm_curve <- function(item, size, frame, measure) {
val <- enquo(measure)
df <- frame %>%
filter(TypeItem == item & sample_size == size)
dnorm(target_grid(!!val), df$mean, df$sd)
}
target_curve_UI <- foreach(i=seq(100, 1000, by=100), .combine = 'rbind') %do% {
foreach(j=c('F1', 'F2', 'F3', 'I1', 'I2', 'I3', 'U1', 'U2', 'U3'), .combine = 'rbind') %do%
{data.frame(TypeItem = j,
sample_size = i,
sum_UI95 = target_grid(sum_UI95),
norm_curve = norm_curve(j, i, target_dens_UI, sum_UI95))
}
}
target_UI_hist <- ggplot(target_scores, aes(sum_UI95)) +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size)) +
geom_density() +
geom_line(aes(y = norm_curve), data = target_curve_UI, colour = "red")
target_dens_MAUI <- target_scores %>%
group_by(TypeItem, sample_size) %>%
summarise(mean = mean(sum_MAUI),
sd = sd(sum_MAUI))
target_curve_MAUI <- foreach(i=seq(100, 1000, by=100), .combine = 'rbind') %do% {
foreach(j=c('F1', 'F2', 'F3', 'I1', 'I2', 'I3', 'U1', 'U2', 'U3'), .combine = 'rbind') %do%
{data.frame(TypeItem = j,
sample_size = i,
sum_MAUI = target_grid(sum_MAUI),
norm_curve = norm_curve(j, i, target_dens_MAUI, sum_MAUI))
}
}
target_MAUI_hist <- ggplot(target_scores, aes(sum_MAUI)) +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size)) +
geom_density() +
geom_line(aes(y = norm_curve), data = target_curve_MAUI, colour = "red")
target_dens_top5 <- target_scores %>%
group_by(TypeItem, sample_size) %>%
summarise(mean = mean(top5_MAUI),
sd = sd(top5_MAUI))
target_curve_top5 <- foreach(i=seq(100, 1000, by=100), .combine = 'rbind') %do% {
foreach(j=c('F1', 'F2', 'F3', 'I1', 'I2', 'I3', 'U1', 'U2', 'U3'), .combine = 'rbind') %do%
{data.frame(TypeItem = j,
sample_size = i,
top5_MAUI = target_grid(top5_MAUI),
norm_curve = norm_curve(j, i, target_dens_top5, top5_MAUI))
}
}
target_top5_hist <- ggplot(target_scores, aes(top5_MAUI)) +
facet_grid(rows = vars(TypeItem), cols = vars(sample_size)) +
geom_density() +
geom_line(aes(y = norm_curve), data = target_curve_top5, colour = "red")
#'participant comparisons across sample sizes
target_variation <- target_scores %>%
group_by(partID, TypeItem) %>%
summarise(mean_MAUI = mean(sum_MAUI),
sd_MAUI = sd(sum_MAUI),
mean_UI95 = mean(sum_UI95),
sd_UI95 = sd(sum_UI95),
mean_top5 = mean(top5_MAUI),
sd_top5 = sd(top5_MAUI),
sd_diff = sd_UI95 - sd_MAUI)
var_I2 <- target_variation %>%
filter(TypeItem == 'I2')
t.test(var_I2$sd_MAUI, var_I2$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F1')$sd_MAUI, filter(target_variation, TypeItem == 'F1')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F2')$sd_MAUI, filter(target_variation, TypeItem == 'F2')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F3')$sd_MAUI, filter(target_variation, TypeItem == 'F3')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I1')$sd_MAUI, filter(target_variation, TypeItem == 'I1')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I2')$sd_MAUI, filter(target_variation, TypeItem == 'I2')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I3')$sd_MAUI, filter(target_variation, TypeItem == 'I3')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U1')$sd_MAUI, filter(target_variation, TypeItem == 'U1')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U2')$sd_MAUI, filter(target_variation, TypeItem == 'U2')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U3')$sd_MAUI, filter(target_variation, TypeItem == 'U3')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F1')$sd_top5, filter(target_variation, TypeItem == 'F1')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F2')$sd_top5, filter(target_variation, TypeItem == 'F2')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F3')$sd_top5, filter(target_variation, TypeItem == 'F3')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I1')$sd_top5, filter(target_variation, TypeItem == 'I1')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I2')$sd_top5, filter(target_variation, TypeItem == 'I2')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I3')$sd_top5, filter(target_variation, TypeItem == 'I3')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U1')$sd_top5, filter(target_variation, TypeItem == 'U1')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U2')$sd_top5, filter(target_variation, TypeItem == 'U2')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U3')$sd_top5, filter(target_variation, TypeItem == 'U3')$sd_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F1')$sd_MAUI, filter(target_variation, TypeItem == 'F1')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F2')$sd_MAUI, filter(target_variation, TypeItem == 'F2')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F3')$sd_MAUI, filter(target_variation, TypeItem == 'F3')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I1')$sd_MAUI, filter(target_variation, TypeItem == 'I1')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I2')$sd_MAUI, filter(target_variation, TypeItem == 'I2')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I3')$sd_MAUI, filter(target_variation, TypeItem == 'I3')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U1')$sd_MAUI, filter(target_variation, TypeItem == 'U1')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U2')$sd_MAUI, filter(target_variation, TypeItem == 'U2')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U3')$sd_MAUI, filter(target_variation, TypeItem == 'U3')$sd_top5, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F1')$mean_MAUI, filter(target_variation, TypeItem == 'F1')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F2')$mean_MAUI, filter(target_variation, TypeItem == 'F2')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'F3')$mean_MAUI, filter(target_variation, TypeItem == 'F3')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I1')$mean_MAUI, filter(target_variation, TypeItem == 'I1')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I2')$mean_MAUI, filter(target_variation, TypeItem == 'I2')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'I3')$mean_MAUI, filter(target_variation, TypeItem == 'I3')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U1')$mean_MAUI, filter(target_variation, TypeItem == 'U1')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U2')$mean_MAUI, filter(target_variation, TypeItem == 'U2')$mean_UI95, paired=TRUE)
t.test(filter(target_variation, TypeItem == 'U3')$mean_MAUI, filter(target_variation, TypeItem == 'U3')$mean_UI95, paired=TRUE)
install.packages('tidyverse')
library(tidyverse)
install.packages('backports')
install.packages('tidyverse')
library(tidyverse)
library(ggplot2)
library(foreach)
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
raw <- read_csv('data/test data.csv')
View(raw)
raw <- read_csv('data/Garrett GearToy Data_TwoColumn.csv')
names(raw) <- c('participant', 'response')
View(raw)
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
#'This codelet operates on a single item
#' input file
#' first column must be named 'participant' and holds participant IDs
#' secon column must be named 'response' and holds the standardized responses
# raw <- read_csv('data/test data.csv')
# raw$response <- str_replace_all(raw$response, "[^[:alnum:]]", " ") %>% #gets rid of non alphanumerics
#   tolower() #' turns everything to lowercase
raw <- read_csv('data/Garrett GearToy Data_TwoColumn.csv')
names(raw) <- c('participant', 'response')
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
#' p_response_scores is the original data with MAUI and UI scores appended to each response
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency))
#' calculates the top X score to append below
=======
>>>>>>> 0be9018b67c198d7d9f884f4c16fc395ff2c2524
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
<<<<<<< HEAD
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
plot(mass_graph)
View(freq_table)
score_freq <- read_csv('data/score_frequencies.csv') %>%
select(-X1)
View(score_freq)
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
View(freq_table)
View(mass_table)
=======
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
#####
# code for 'mega-viz'
library(ggExtra)
hist_dens <- ggplot(p_response_scores, aes(x = MAUI, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none',
plot.margin = c(0,0,0,0))
plot(bar)
plot(hist_dens)
View(freq_table)
plot(MAUI_tree)
View(raw)
View(mass_table)
plot(response_tree)
dev.off()
dev.off()
dev.off()
plot(response_tree)
plot(hist_dens)
plot(bar)
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none',
plot.margin = c(0,0,0,0))
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none')
library(Cairo)
CairoPNG(filename="graphs/paperclip_hist_dens.png",
units="in",
width=8,
height=5.6,
pointsize=12,
res=96)
print(hist_dens)
CairoPNG(filename="graphs/paperclip_bar.png",
units="in",
width=.5,
height=8,
pointsize=12,
res=96)
print(bar)
dev.off()
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
CairoPNG(filename='graphs/paperclip_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
dev.off()
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
CairoPNG(filename='graphs/paperclip_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
CairoPNG(filename='graphs/paperclip_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
CairoPNG(filename='graphs/paperclip_responses.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(response_tree)
dev.off()
>>>>>>> 0be9018b67c198d7d9f884f4c16fc395ff2c2524
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
#'This codelet operates on a single item
#' input file
#' first column must be named 'participant' and holds participant IDs
#' secon column must be named 'response' and holds the standardized responses
# raw <- read_csv('data/test data.csv')
# raw$response <- str_replace_all(raw$response, "[^[:alnum:]]", " ") %>% #gets rid of non alphanumerics
#   tolower() #' turns everything to lowercase
# use next line for paperclip data
#raw <- read_csv('data/Garrett Dissertation Data Answers Only.csv') %>%
filter(TypeItem == 'U1') %>%
select(one_of(c('partID', 'Std')))
# Use next line for gear data
raw <- read_csv('data/Garrett GearToy Data_TwoColumn.csv')
names(raw) <- c('participant', 'response')
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
#' p_response_scores is the original data with MAUI and UI scores appended to each response
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency)) %>%
ungroup()
#' calculates the top X score to append below
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
View(mass_table)
View(mass_table)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass))
response_tree <- ggplot(mass_table, aes(y = norm_rank, weight = mass_weight)) +
geom_violin() +
<<<<<<< HEAD
geom_boxplot(width = 0.1)
plot(response_tree)
response_tree <- ggplot(mass_table, aes(x = factor(task),y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
plot(response_tree)
=======
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#####
# code for 'mega-viz'
library(ggExtra)
hist_dens <- ggplot(p_response_scores, aes(x = MAUI, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none')
#'for prettier graphs
library(Cairo)
CairoPNG(filename="graphs/gears_hist_dens.png",
units="in",
width=8,
height=5.6,
pointsize=12,
res=96)
print(hist_dens)
dev.off()
CairoPNG(filename="graphs/gears_bar.png",
units="in",
width=.5,
height=8,
pointsize=12,
res=96)
print(bar)
dev.off()
CairoPNG(filename='graphs/gears_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
CairoPNG(filename='graphs/gears_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
CairoPNG(filename='graphs/gears_responses.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(response_tree)
dev.off()
>>>>>>> 0be9018b67c198d7d9f884f4c16fc395ff2c2524
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
#'This codelet operates on a single item
#' input file
#' first column must be named 'participant' and holds participant IDs
#' secon column must be named 'response' and holds the standardized responses
# raw <- read_csv('data/test data.csv')
# raw$response <- str_replace_all(raw$response, "[^[:alnum:]]", " ") %>% #gets rid of non alphanumerics
#   tolower() #' turns everything to lowercase
# use next line for paperclip data
#raw <- read_csv('data/Garrett Dissertation Data Answers Only.csv') %>%
filter(TypeItem == 'U1') %>%
select(one_of(c('partID', 'Std')))
# Use next line for gear data
raw <- read_csv('data/Garrett GearToy Data_TwoColumn.csv')
names(raw) <- c('participant', 'response')
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
#' p_response_scores is the original data with MAUI and UI scores appended to each response
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency))
#' calculates the top X score to append below
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears')
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
plot(response_tree)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
<<<<<<< HEAD
geom_boxplot(width = 0.1)
plot(MAUI_tree)
GeomSplitViolin <- ggproto("GeomSplitViolin", GeomViolin, draw_group = function(self, data, ..., draw_quantiles = NULL){
data <- transform(data, xminv = x - violinwidth * (x - xmin), xmaxv = x + violinwidth * (xmax - x))
grp <- data[1,'group']
newdata <- plyr::arrange(transform(data, x = if(grp%%2==1) xminv else xmaxv), if(grp%%2==1) y else -y)
newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x'])
if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <=
1))
quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
aesthetics$alpha <- rep(1, nrow(quantiles))
both <- cbind(quantiles, aesthetics)
quantile_grob <- GeomPath$draw_panel(both, ...)
ggplot2:::ggname("geom_split_violin", grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
}
else {
ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
}
})
geom_split_violin <- function (mapping = NULL, data = NULL, stat = "ydensity", position = "identity", ..., draw_quantiles = NULL, trim = TRUE, scale = "area", na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) {
layer(data = data, mapping = mapping, stat = stat, geom = GeomSplitViolin, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(trim = trim, scale = scale, draw_quantiles = draw_quantiles, na.rm = na.rm, ...))
}
##
split_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_split_violin(trim = TRUE) +
geom_boxplot(width = 0.1)
plot(split_tree)
my_data = data.frame(
y=c(rnorm(1000), rnorm(1000, 0.5), rnorm(1000, 1), rnorm(1000, 1.5)),
x=c(rep('a', 2000), rep('b', 2000)),
m=c(rep('i', 1000), rep('j', 2000), rep('i', 1000))
)
View(my_data)
split_mass <- mass_table %>%
select(-frequency, -count, -mass, -cum_mass) %>%
gather("measure", "score", -norm_rank, -mass_weight, -task)
View(split_mass)
split_mass_table <- mass_table %>%
select(-frequency, -count, -mass, -cum_mass) %>%
gather("measure", "score", -norm_rank, -mass_weight, -task)
split_tree <- ggplot(split_mass_table, aes(x = score, y = norm_rank, weight = mass_weight)) +
geom_split_violin(trim = TRUE) +
geom_boxplot(width = 0.1)
plot(split_tree)
split_tree <- ggplot(split_mass_table, aes(x = score, y = norm_rank, weight = mass_weight)) +
geom_split_violin(trim = TRUE)
plot(split_tree)
UI_tree <- ggplot(score_freq, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
plot(UI_tree)
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
plot(UI_tree)
split_tree <- ggplot(split_mass_table, aes(x = score, y = norm_rank, weight = mass_weight)) +
geom_split_violin(trim = TRUE) +
geom_boxplot(width = 0.25, notch = FALSE, notchwidth = .4, outlier.shape = NA, coef=0) +
labs(x=NULL,y="GM Attitude Score") +
theme_classic() +
theme(text = element_text(size = 20)) +
scale_x_discrete(labels=c("0" = "Control\nCondition", "1" = "GM\nCondition")) +
scale_fill_manual(values=c("#E69F00", "#999999"),
name="Survey\nPart",
breaks=c("1", "2"),
labels=c("Time 1", "Time 5"))
plot(split_tree)
View(split_mass_table)
split_tree <- ggplot(split_mass_table, aes(x = score, y = norm_rank, fill = measure, weight = mass_weight)) +
geom_split_violin(trim = TRUE) +
geom_boxplot(width = 0.25, notch = FALSE, notchwidth = .4, outlier.shape = NA, coef=0) +
labs(x=NULL,y="GM Attitude Score") +
theme_classic() +
theme(text = element_text(size = 20)) +
scale_x_discrete(labels=c("0" = "Control\nCondition", "1" = "GM\nCondition")) +
scale_fill_manual(values=c("#E69F00", "#999999"),
name="Survey\nPart",
breaks=c("1", "2"),
labels=c("Time 1", "Time 5"))
plot(split_tree)
View(raw)
View(p_scores)
=======
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#####
# code for 'mega-viz'
library(ggExtra)
hist_dens <- ggplot(p_response_scores, aes(x = MAUI, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none')
View(p_response_scores)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
plot(response_tree)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
coord_flip()
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
coord_flip()
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = ..ndensity.., y=norm_rank)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
#' This graph is good to show how the violin graph is generated
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank,y = ..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_flip(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank,y = ..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_flip(xlim=c(0,1)) +
geom_boxplot(width = 0.1) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank,y = ..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_flip(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
>>>>>>> 0be9018b67c198d7d9f884f4c16fc395ff2c2524

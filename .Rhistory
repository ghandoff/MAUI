left_join(select(mass_table, -count, -mass, -cum_mass))
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'voting',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
curve_formula <- formula(MAUI ~ ((d*(norm_rank)^g)/((d*(norm_rank)^g)+(1-norm_rank)^g)))
freq_table <- read_csv('data/APA_ranked/APA_2003_ranked.csv', col_names = FALSE)%>%
transmute(response = paste(X1, X2, X3, X4, X5, sep = "."),
frequency = X6)
#n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/max(cum_mass),
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'voting',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
curve_formula <- formula(MAUI ~ ((d*(norm_rank)^g)/((d*(norm_rank)^g)+(1-norm_rank)^g)))
#' SAVE SMPL_RANKS HERE FOR GRAPHING
#' ggplot(data = smpl_ranks, aes(x = MAUI, y = mass)) + geom_col() + xlim(0,1)
#' ggplot(data = smpl_ranks, aes(x = 1-pct_giving, y = mass)) + geom_col() + geom_vline(aes(xintercept = .95)) + xlim(0,1)
#'
#FIT GAMMA AND DELTA HERE
fit <- nls(curve_formula, mass_table, start = list(d = .5, g = .6))
delta_gamma <- ggplot(mass_table, aes(x = norm_rank, y = MAUI)) +
geom_point() +
geom_smooth(method="nls",
formula=curve_formula, # this is an nls argument
method.args = list(start=c(d = .5, g = .5)), # this too
se=FALSE)
plot(delta_gamma)
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
#'This codelet operates on a single item
#' input file
#' first column must be named 'participant' and holds participant IDs
#' secon column must be named 'response' and holds the standardized responses
# raw <- read_csv('data/test data.csv')
# raw$response <- str_replace_all(raw$response, "[^[:alnum:]]", " ") %>% #gets rid of non alphanumerics
#   tolower() #' turns everything to lowercase
# use next line for paperclip data
raw <- read_csv('data/Garrett Dissertation Data Answers Only.csv') %>%
filter(TypeItem == 'U1') %>%
select(one_of(c('partID', 'Std')))
# Use next line for gear data
#raw <- read_csv('data/Garrett GearToy Data_TwoColumn.csv')
names(raw) <- c('participant', 'response')
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
#' p_response_scores is the original data with MAUI and UI scores appended to each response
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency)) %>%
ungroup()
#' calculates the top X score to append below
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears',
freq_rank_color = dense_rank(frequency)%%2)
View(p_response_scores)
diss_tall <- read_csv('data/dissertation tall.csv')
View(freq_table)
tall_w_MAUI <- diss_tall %>% left_join(freq_table, by=c("response" = "Std"))
tall_w_MAUI <- diss_tall %>% left_join(freq_table, by=c("Std" = response"))
)
View(diss_tall)
tall_w_MAUI <- left_join(diss_tall, freq_table, by=c("Std" = response"))
tall_w_MAUI <- left_join(diss_tall, freq_table, by = c("Std" = response"))
)
)
)))))
typeof(diss_tall)
typeof(freq_table)
diss_tall <- as_tibble(diss_tall)
typeof(diss_tall)
tall_w_MAUI <- left_join(diss_tall, freq_table, by = c("Std" = response"))
tall_w_MAUI <- left_join(diss_tall, freq_table, by = c("Std" = "response"))
View(tall_w_MAUI)
#' for possible SJDM stuff
diss_tall <- read_csv('data/dissertation tall.csv') %>%
select(-MAUI, -UI)
tall_w_MAUI <- left_join(diss_tall, freq_table, by = c("Std" = "response"))
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = RespSec, y = MAUI, colour = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(filter(tall_w_MAUI, respID == 80502122), aes(x = RespSec, y = MAUI, colour = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(filter(tall_w_MAUI, respID == 80502122 \ 87105617), aes(x = RespSec, y = MAUI, colour = respID)) +
geom_line()
MAUI_by_time <- ggplot(filter(tall_w_MAUI, respID == 80502122 | 87105617), aes(x = RespSec, y = MAUI, colour = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(filter(tall_w_MAUI, respID == 80502122 | respID == 87105617), aes(x = RespSec, y = MAUI, colour = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(filter(tall_w_MAUI, respID == 80502122 | respID == 87105617), aes(x = RespSec, y = MAUI, group = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(filter(tall_w_MAUI, respID == 80502122 | respID == 87105617), aes(x = RespSec, y = MAUI, colour = respID, group = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI), aes(x = RespSec, y = MAUI, colour = respID, group = respID)) +
geom_line()
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = RespSec, y = MAUI, colour = respID, group = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI, colour = respID, group = respID)) +
geom_line()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI, colour = respID, group = respID)) +
geom_jitter()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI, colour = respID, group = respID)) +
geom_smooth()
plot(MAUI_by_time)
warnings()
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI, colour = respID, group = respID)) +
geom_smooth(method = lm)
warnings()
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI)) +
geom_smooth(method = lm)
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI, group = ShiftCount)) +
geom_smooth(method = lm)
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI, group = ShiftCount, colour = ShiftCount)) +
geom_smooth(method = lm)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = CaseOrder, y = MAUI, group = ShiftCount, colour = ShiftCount)) +
geom_smooth(method = lm)
plot(MAUI_by_time)
MAUI_by_time <- ggplot(tall_w_MAUI, aes(x = RespSec, y = MAUI, group = ShiftCount, colour = ShiftCount)) +
geom_smooth(method = lm)
plot(MAUI_by_time)
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
freq_table <- read_csv('data/APA_ranked/APA_2003_ranked.csv', col_names = FALSE)%>%
transmute(response = paste(X1, X2, X3, X4, X5, sep = "."),
frequency = X6)
#n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/max(cum_mass),
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'voting',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
curve_formula <- formula(MAUI ~ ((d*(norm_rank)^g)/((d*(norm_rank)^g)+(1-norm_rank)^g)))
plot(MAUI_tree)
library(tidyverse)
tipi <- read_csv('data/Profiles Tall99 TIPI.csv')
View(tipi)
tipi <- read_csv('data/Profiles Tall99 TIPI.csv') %>%
mutate(extroversion = mean(TIPI1, TIPI6),
agreeableness = mean(TIPI2, TIPI7),
conscientiousness = mean(TIPI3, TIPI8),
neuroticism = mean(TIPI4, TIPI9),
openness = mean(TIPI5, TIPI10))
tipi <- read_csv('data/Profiles Tall99 TIPI.csv') %>%
mutate(extroversion = (TIPI1 + TIPI6)/2,
agreeableness = (TIPI2 + TIPI7)/2,
conscientiousness = (TIPI3 + TIPI8)/2,
neuroticism = (TIPI4 + TIPI9)/2,
openness = (TIPI5 + TIPI10)/2)
responses <- read_csv('data/Profiles Tall99 responses.csv')
View(responses)
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(RespOrd = if_else(lag(partID) != partID, 1, if_else(lag(ItemOrd) != ItemOrd, 1, lag(RespOrd) +1)))
responses <- read_csv('data/Profiles Tall99 responses.csv')
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(item = paste(Type, ItemOrd, sep = "-"))
responses_1.1 <- filter(responses, item = "1-1")
responses_1.1 <- filter(responses, item == "1-1")
View(responses_1.1)
responses_1.2 <- filter(responses, item == "1-2")
responses_1.3 <- filter(responses, item == "1-3")
responses_2.1 <- filter(responses, item == "2-1")
responses_2.2 <- filter(responses, item == "2-2")
responses_2.3 <- filter(responses, item == "2-3")
responses_3.1 <- filter(responses, item == "3-1")
responses_3.2 <- filter(responses, item == "3-2")
responses_3.3 <- filter(responses, item == "3-3")
responses_only <- responses  %>%
select(one_of(c('partID', 'Std')))
responses_only <- responses  %>%
select(one_of(c('partID', 'Std')))
responses_1.1 <- filter(responses_only, item == "1-1")
responses_1.2 <- filter(responses_only, item == "1-2")
responses_1.3 <- filter(responses_only, item == "1-3")
responses_2.1 <- filter(responses_only, item == "2-1")
responses_2.2 <- filter(responses_only, item == "2-2")
responses_2.3 <- filter(responses_only, item == "2-3")
responses_3.1 <- filter(responses_only, item == "3-1")
responses_3.2 <- filter(responses_only, item == "3-2")
responses_3.3 <- filter(responses_only, item == "3-3")
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(item = paste(Type, ItemOrd, sep = "-"))
responses_1.1 <- filter(responses, item == "1-1") %>% select(one_of(c('partID', 'Std')))
responses_1.2 <- filter(responses, item == "1-2") %>% select(one_of(c('partID', 'Std')))
responses_1.3 <- filter(responses, item == "1-3") %>% select(one_of(c('partID', 'Std')))
responses_2.1 <- filter(responses, item == "2-1") %>% select(one_of(c('partID', 'Std')))
responses_2.2 <- filter(responses, item == "2-2") %>% select(one_of(c('partID', 'Std')))
responses_2.3 <- filter(responses, item == "2-3") %>% select(one_of(c('partID', 'Std')))
responses_3.1 <- filter(responses, item == "3-1") %>% select(one_of(c('partID', 'Std')))
responses_3.2 <- filter(responses, item == "3-2") %>% select(one_of(c('partID', 'Std')))
responses_3.3 <- filter(responses, item == "3-3") %>% select(one_of(c('partID', 'Std')))
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- responses_1.1 %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(item = paste(Type, ItemOrd, sep = "-"))
names(responses) <- c('participant', 'response')
responses_1.1 <- filter(responses, item == "1-1") %>% select(one_of(c('participant', 'response')))
responses_1.2 <- filter(responses, item == "1-2") %>% select(one_of(c('participant', 'response')))
responses_1.3 <- filter(responses, item == "1-3") %>% select(one_of(c('participant', 'response')))
responses_2.1 <- filter(responses, item == "2-1") %>% select(one_of(c('participant', 'response')))
responses_2.2 <- filter(responses, item == "2-2") %>% select(one_of(c('participant', 'response')))
responses_2.3 <- filter(responses, item == "2-3") %>% select(one_of(c('participant', 'response')))
responses_3.1 <- filter(responses, item == "3-1") %>% select(one_of(c('participant', 'response')))
responses_3.2 <- filter(responses, item == "3-2") %>% select(one_of(c('participant', 'response')))
responses_3.3 <- filter(responses, item == "3-3") %>% select(one_of(c('participant', 'response')))
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(item = paste(Type, ItemOrd, sep = "-"))
names(responses)
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(item = paste(Type, ItemOrd, sep = "-"))
names(responses) <- c('participant',"Type", "ItemOrd", 'response', "FluItem", "Flex56",     "FlexCode",   "Stop",       "FlexCount",
"FlexItem",   "FlexSum" , "ShiftCount", "ShiftItem",  "ShiftSum" ,  "CaseOrder" , "RespSec" ,   "ReadSec"  ,  "RespOrd" ,   "item"  )
responses_1.1 <- filter(responses, item == "1-1") %>% select(one_of(c('participant', 'response')))
responses_1.2 <- filter(responses, item == "1-2") %>% select(one_of(c('participant', 'response')))
responses_1.3 <- filter(responses, item == "1-3") %>% select(one_of(c('participant', 'response')))
responses_2.1 <- filter(responses, item == "2-1") %>% select(one_of(c('participant', 'response')))
responses_2.2 <- filter(responses, item == "2-2") %>% select(one_of(c('participant', 'response')))
responses_2.3 <- filter(responses, item == "2-3") %>% select(one_of(c('participant', 'response')))
responses_3.1 <- filter(responses, item == "3-1") %>% select(one_of(c('participant', 'response')))
responses_3.2 <- filter(responses, item == "3-2") %>% select(one_of(c('participant', 'response')))
responses_3.3 <- filter(responses, item == "3-3") %>% select(one_of(c('participant', 'response')))
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- responses_1.1 %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency)) %>%
ungroup()
#' calculates the top X score to append below
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p_response_scores <- responses_1.1 %>%
left_join(select(freq_table, -frequency)) %>%
ungroup()
#' calculates the top X score to append below
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
plot(MAUI_tree)
plot(response_tree)

top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
#####
# code for 'mega-viz'
library(ggExtra)
hist_dens <- ggplot(p_response_scores, aes(x = MAUI, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none',
plot.margin = c(0,0,0,0))
plot(bar)
plot(hist_dens)
View(freq_table)
plot(MAUI_tree)
View(raw)
View(mass_table)
plot(response_tree)
dev.off()
dev.off()
dev.off()
plot(response_tree)
plot(hist_dens)
plot(bar)
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none',
plot.margin = c(0,0,0,0))
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none')
library(Cairo)
CairoPNG(filename="graphs/paperclip_hist_dens.png",
units="in",
width=8,
height=5.6,
pointsize=12,
res=96)
print(hist_dens)
CairoPNG(filename="graphs/paperclip_bar.png",
units="in",
width=.5,
height=8,
pointsize=12,
res=96)
print(bar)
dev.off()
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
CairoPNG(filename='graphs/paperclip_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
dev.off()
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
CairoPNG(filename='graphs/paperclip_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
CairoPNG(filename='graphs/paperclip_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
CairoPNG(filename='graphs/paperclip_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
CairoPNG(filename='graphs/paperclip_responses.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(response_tree)
dev.off()
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
#'This codelet operates on a single item
#' input file
#' first column must be named 'participant' and holds participant IDs
#' secon column must be named 'response' and holds the standardized responses
# raw <- read_csv('data/test data.csv')
# raw$response <- str_replace_all(raw$response, "[^[:alnum:]]", " ") %>% #gets rid of non alphanumerics
#   tolower() #' turns everything to lowercase
# use next line for paperclip data
#raw <- read_csv('data/Garrett Dissertation Data Answers Only.csv') %>%
filter(TypeItem == 'U1') %>%
select(one_of(c('partID', 'Std')))
# Use next line for gear data
raw <- read_csv('data/Garrett GearToy Data_TwoColumn.csv')
names(raw) <- c('participant', 'response')
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
#' p_response_scores is the original data with MAUI and UI scores appended to each response
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency)) %>%
ungroup()
#' calculates the top X score to append below
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#####
# code for 'mega-viz'
library(ggExtra)
hist_dens <- ggplot(p_response_scores, aes(x = MAUI, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none')
#'for prettier graphs
library(Cairo)
CairoPNG(filename="graphs/gears_hist_dens.png",
units="in",
width=8,
height=5.6,
pointsize=12,
res=96)
print(hist_dens)
dev.off()
CairoPNG(filename="graphs/gears_bar.png",
units="in",
width=.5,
height=8,
pointsize=12,
res=96)
print(bar)
dev.off()
CairoPNG(filename='graphs/gears_MAUI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(MAUI_tree)
dev.off()
CairoPNG(filename='graphs/gears_UI.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(UI_tree)
dev.off()
CairoPNG(filename='graphs/gears_responses.png',
units="in",
width=4,
height=5.6,
pointsize=12,
res=96)
print(response_tree)
dev.off()
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
#'This codelet operates on a single item
#' input file
#' first column must be named 'participant' and holds participant IDs
#' secon column must be named 'response' and holds the standardized responses
# raw <- read_csv('data/test data.csv')
# raw$response <- str_replace_all(raw$response, "[^[:alnum:]]", " ") %>% #gets rid of non alphanumerics
#   tolower() #' turns everything to lowercase
# use next line for paperclip data
#raw <- read_csv('data/Garrett Dissertation Data Answers Only.csv') %>%
filter(TypeItem == 'U1') %>%
select(one_of(c('partID', 'Std')))
# Use next line for gear data
raw <- read_csv('data/Garrett GearToy Data_TwoColumn.csv')
names(raw) <- c('participant', 'response')
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
top_x <- 5 #' how many of the highest MAUI scores to use for the top X score
#' freq_table holds standardized responses and the frequency they occur in the item (i.e. the size of the fruit)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
#' mass_table has a bunch of intermediate calculations, and also the scores
#' 'frequency' is how often that response occurs in the item (fruit size)
#' 'count' is how many responses are of that frequency (i.e. how many fruits are on that level)
#' 'mass' is frequency*count (i.e. the total mass of fruit on that level)
#' 'cum_mass' is the mass of responses on that level and below
#' MAUI is calculated from the cum_mass of the level below + half of the current level mass
#' UI is calculated in the standard way from n and UI_thresh
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n,
norm_rank = (rank(cum_mass) - .5)/nrow(.))
#' appends MAUI and UI to freq_table
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
#' p_response_scores is the original data with MAUI and UI scores appended to each response
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency)) %>%
ungroup()
#' calculates the top X score to append below
top_x_scores <- p_response_scores %>%
select(-UI) %>%
arrange(participant, desc(MAUI)) %>%
group_by(participant) %>%
slice(seq_len(top_x)) %>%
summarise(top_x_MAUI = sum(MAUI))
#' p_scores is a summary for each participant
#' current reports fluency, the sum of all MAUI scores and the sum of all UI scores
#' But very adaptable for new scores!
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(fluency = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI)) %>%
left_join(top_x_scores)
mass_table <- mass_table %>%
mutate(mass_weight = mass/max(cum_mass)) %>%
mutate(task = 'gears',
freq_rank_color = dense_rank(frequency)%%2)
mass_graph <- ggplot(mass_table) +
geom_line(aes(norm_rank, MAUI), color = 'blue') +
geom_line(aes(norm_rank, UI), color = 'red')
response_tree <- ggplot(mass_table, aes(x = factor(task), y = norm_rank, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1)
MAUI_tree <- ggplot(mass_table, aes(x = factor(task), y = MAUI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
UI_tree <- ggplot(mass_table, aes(x = factor(task), y = UI, weight = mass_weight)) +
geom_violin() +
geom_boxplot(width = 0.1) +
coord_cartesian(ylim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#####
# code for 'mega-viz'
library(ggExtra)
hist_dens <- ggplot(p_response_scores, aes(x = MAUI, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
bar <- ggplot(mass_table) +
geom_bar(aes(task, mass_weight, fill = freq_rank_color), stat = 'identity', width = 1) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position='none')
View(p_response_scores)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
plot(response_tree)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
coord_flip()
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank, y=..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
coord_flip()
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = ..ndensity.., y=norm_rank)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_cartesian(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
#' This graph is good to show how the violin graph is generated
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank,y = ..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_flip(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank,y = ..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_flip(xlim=c(0,1)) +
geom_boxplot(width = 0.1) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)
hist_dens_normrank <- ggplot(p_response_scores, aes(x = norm_rank,y = ..ndensity..)) +
stat_density(position="identity", geom="line") +
geom_histogram(binwidth = .005) +
coord_flip(xlim=c(0,1)) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
plot(hist_dens_normrank)

facet_grid(sample_size ~ TypeItem)
plot(MAUI_participant_hist)
MAUI_participant_hist <- ggplot(data = participant_scores, aes(top5_MAUI)) +
geom_density() +
geom_line(data=MAUI_normdens, aes(y=density), colour='red') +
facet_grid(sample_size ~ TypeItem)
plot(MAUI_participant_hist)
UI_grid <- with(participant_scores, seq(min(top5_pct), max(top5_pct), length = 100))
UI_normdens <- participant_scores %>%
select(one_of(c('top5_pct', 'TypeItem', 'sample_size'))) %>%
group_by_at(vars(one_of('TypeItem', 'sample_size'))) %>%
do(data.frame(top5_pct = UI_grid,  density = dnorm(UI_grid, mean(.$top5_pct), sd(.$top5_pct))))
pct_participant_hist <- ggplot(data = participant_scores, aes(top5_pct)) +
geom_density() +
geom_line(data=UI_normdens, aes(y=density), colour='red') +
facet_grid(sample_size ~ TypeItem)
plot(pct_participant_hist)
MAUI_target_hist <- ggplot(data = target_scores, aes(top5_MAUI)) +
geom_histogram() +
facet_grid(sample_size ~ TypeItem)
pct_target_hist <- ggplot(data = target_scores, aes(top5_pct)) +
geom_histogram() +
facet_grid(sample_size ~ TypeItem)
plot(pct_target_hist)
plot(MAUI_target_hist)
View(participant_scores)
UI95_grid <- with(participant_scores, seq(min(sum_UI95), max(sum_UI95), length = 100))
UI95_normdens <- participant_scores %>%
select(one_of(c('sum_UI95', 'TypeItem', 'sample_size'))) %>%
group_by_at(vars(one_of('TypeItem', 'sample_size'))) %>%
do(data.frame(sum_UI95 = UI95_grid,  density = dnorm(UI95_grid, mean(.$sum_UI95), sd(.$sum_UI95))))
UI95_participant_hist <- ggplot(data = participant_scores, aes(sum_UI95)) +
geom_density() +
geom_line(data=UI95_normdens, aes(y=density), colour='red') +
facet_grid(sample_size ~ TypeItem)
plot(UI95_participant_hist)
MAUI_target_hist <- ggplot(data = target_scores, aes(top5_MAUI)) +
geom_density() +
facet_grid(sample_size ~ TypeItem)
UI95_target_hist <- ggplot(data = target_scores, aes(sum_UI95)) +
geom_density() +
facet_grid(sample_size ~ TypeItem)
pct_target_hist <- ggplot(data = target_scores, aes(top5_pct)) +
geom_density() +
facet_grid(sample_size ~ TypeItem)
plot(pct_target_hist)
plot(MAUI_target_hist)
plot(UI95_target_hist)
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
raw <- read_csv('data/test data.csv')
freq <- raw %>%
group_by(response) %>%
summarise(frequency = n())
View(freq)
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n())
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n())
View(mass_table)
View(freq_table)
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
mutate(mass = frequency*count)
View(mass_table)
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc()) %>%
mutate(mass = frequency*count)
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
mutate(mass = frequency*count) %>%
arrange(desc(mass))
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>
mutate(cum_mass = cumsum(mass)
)
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass))
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI =  (cum_mass - mass/2)/max(cum_mass))
intToHex(1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413)
install.packages('arith')
install.packages('cwhmisc')
library(cwhmisc)
intToHex(1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413)
intToBase(1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413, 16)
x <- -1:12
x + 1
2 * x + 3
x %% 2 #-- is periodic
x %/% 5
x %% 5
x %/% 2
library(tidyverse)
stem <- 1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413
base <- 16
power <- 0
tbl <- as.tibble(power = as.integer(), remainder = as.integer())
one_step <- function(x, b) {
rem <- x %% b
stem <<- x %/% b
tbl <<- bind_rows(tbl, c(power, rem))
}
while (stem > base) {
one_step()
power <- power+1
}
stem <- 1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413
base <- 16
power <- 0
tbl <- as_tibble(power = as.integer(), remainder = as.integer())
one_step <- function(x, b) {
rem <- x %% b
stem <<- x %/% b
tbl <<- bind_rows(tbl, c(power, rem))
}
while (stem > base) {
one_step(stem, base)
power <- power+1
}
stem <- 1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413
base <- 16
power <- 0
tbl <- as_tibble(power = as.integer(), remainder = as.integer())
one_step <- function(x, b) {
rem <- x %% b
stem <<- x %/% b
tbl <<- rbind(tbl, c(power, rem))
}
while (stem > base) {
one_step(stem, base)
power <- power+1
}
1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413/16
[1]/16
as.hexmode(1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413)
as.hexmode(as.integer(1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413))
x <- 1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413
as.hexmode(x)
y <- as.hexmode(x)
1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413/16
16^200
1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413
16^180
16^190
16^195
16^193
16^192
1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413/(16^192)
1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413/(16^193)
1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413/(16^191)
x1 <- c(B,A,S,E,S)
x1 <- as.character(c(B,A,S,E,S))
(str_extract('BASES', "[aA-zZ]+"))
library(tidyverse)
library(readxl)
lines <- read_csv('C:/Users/Zach/Desktop/lines.csv')
guentzel <- lines %>%
filter('Guentzel' %in% name)
View(guentzel)
guentzel <- lines %>%
filter(!grepl("Guentzel",name))
View(lines)
guentzel <- filter(lines, !grepl("Guentzel",name))
guentzel <- filter(lines, grepl("Guentzel",name))
View(guentzel)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
summarise()
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0))
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby) %>%
summarise(mean)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby) %>%
summarise(funs(mean))
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby) %>%
summarise(list(mean))
View(guentzel)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby) %>%
summarise(list(M = mean))
View(guentzel)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby)
View(guentzel)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby) %>%
select(-lineid, -season, -team, -name, -position, -situation) %>%
summarise(list(M = mean))
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby) %>%
select(-lineId, -season, -team, -name, -position, -situation) %>%
summarise(list(M = mean))
View(guentzel)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
group_by(crosby) %>%
#select(-lineId, -season, -team, -name, -position, -situation) %>%
summarise_all(list(M = mean))
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
transmute_all(list(per_min = ./icetime))
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0))
View(guentzel)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
transmute_all(list(per_min = ./icetime))
permin <- function(x) (x/icetime)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
transmute_all(list(per_min = permin)) %>%
group_by(crosby) %>%
#select(-lineId, -season, -team, -name, -position, -situation) %>%
summarise_all(list(M = mean))
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
transmute_all(list(./icetime))
permin <- function(x) (x/guentzel$icetime)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
transmute_all(list(./icetime))
permin <- function(x) (x/guentzel$icetime)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
transmute_all(list(per_min = permin))
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
select(-lineId, -season, -team, -name, -position, -situation) %>%
transmute_all(list(per_min = permin))
permin <- function(x) (if_else(as.character(x), x, x/guentzel$icetime)
guentzel <- filter(lines, grepl("Guentzel",name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
#select(-lineId, -season, -team, -name, -position, -situation) %>%
transmute_all(list(per_min = permin)) %>%
group_by(crosby) %>%
summarise_all(list(M = mean))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
#select(-lineId, -season, -team, -name, -position, -situation) %>%
transmute_all(list(per_min = permin))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
select(-lineId) %>%
transmute_all(list(per_min = permin))
permin <- function(x) (if_else(is.character(x), x, x/guentzel$icetime)
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
#select(-lineId, -season, -team, -name, -position, -situation) %>%
transmute_all(list(per_min = permin))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
#select(-lineId, -season, -team, -name, -position, -situation) %>%
transmute_all(list(per_min = permin))
permin <- function(x) (if_else(is.character(x), x, x/guentzel$icetime))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
#select(-lineId, -season, -team, -name, -position, -situation) %>%
transmute_all(list(per_min = permin))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
select(-lineId, -season, -team, -name, -position, -situation) %>%
mutate_all(list(per_min = permin)) %>%
group_by(crosby) %>%
summarise_all(list(M = mean))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
select(-lineId, -season, -team, -name, -position, -situation) %>%
mutate_all(list(per_min = permin))
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
select(-lineId, -season, -team, -name, -position, -situation)
guentzel <- filter(lines, grepl("Guentzel", name)) %>%
mutate(crosby = if_else(grepl("Crosby", name), 1, 0)) %>%
select(-lineId, -season, -team, -name, -position, -situation) %>%
mutate_all(list(per_min = permin))
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
raw <- read_csv('data/test data.csv')
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI =  (cum_mass - mass/2)/max(cum_mass))
View(mass_table)
View(raw)
n <- nrow(unique(raw$participant))
n
n <- unique(raw$participant)
typeof(n)
n <- nrow(unique(raw$participant))
(n)
n <- length(unique(raw$participant))
n
library(openxlsx)
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
raw <- read_csv('data/test data.csv')
n <- length(unique(raw$participant))
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - count/n)
View(mass_table)
raw <- read_csv('data/test data.csv')
n <- length(unique(raw$participant))
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n)
View(freq_table)
View(mass_table)
raw <- read_csv('data/test data.csv')
n <- length(unique(raw$participant))
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n)
freq_table <- mass_table %>%
select(-count, -mass, -cum_mass) %>%
right_join(freq_table)
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n)
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
View(raw)
p_scores <- raw %>%
left_join(select(freq_table, -frequency))
View(p_scores)
raw <- read_csv('data/test data.csv')
n <- length(unique(raw$participant))
UI_tresh <- .95
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n)
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency))
p_scores <- p_response_scores %>%
transmute(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(MAUI_sum = sum(MAUI),
UI_sum = sum(UI))
raw <- read_csv('data/test data.csv')
n <- length(unique(raw$participant))
UI_thresh <- .95
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n)
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency))
p_scores <- p_response_scores %>%
transmute(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(MAUI_sum = sum(MAUI),
UI_sum = sum(UI))
View(p_response_scores)
p_scores <- p_response_scores %>%
transmute(UI = if_else(UI >= UI_thresh, 1, 0))
View(p_scores)
UI_thresh <- .95
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n)
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency))
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(MAUI_sum = sum(MAUI),
UI_sum = sum(UI))
p_scores <- p_response_scores %>%
mutate(UI = if_else(UI >= UI_thresh, 1, 0)) %>%
group_by(participant) %>%
summarise(responses = n(),
MAUI_sum = sum(MAUI),
UI_sum = sum(UI))
library(doParallel)
library(foreach)
library(tidyverse)
library(readxl)
#'This codelet operates on a single item
#' input file
#' first column must be named 'participant' and holds participant IDs
#' secon column must be named 'response' and holds the standardized responses
raw <- read_csv('data/test data.csv')
n <- length(unique(raw$participant)) #' calculates number of participants
UI_thresh <- .95 #' the 'old UI' threshhold, default at 95%
#' freq
freq_table <- raw %>%
group_by(response) %>%
summarise(frequency = n())
View(freq_table)
mass_table <- freq_table %>%
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = frequency*count) %>%
mutate(cum_mass = cumsum(mass)) %>%
mutate(MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/n)
freq_table <- freq_table %>%
left_join(select(mass_table, -count, -mass, -cum_mass))
p_response_scores <- raw %>%
left_join(select(freq_table, -frequency))
View(p_response_scores)
View(mass_table)

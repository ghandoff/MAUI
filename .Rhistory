arrange(desc(frequency)) %>%
mutate(mass = count*frequency) %>%
mutate(size = size,
cum_mass = cumsum(mass),
MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/size,
norm_rank = (rank(cum_mass) - .5)/nrow(.),
weight = mass/max(cum_mass)) %>%
arrange(desc(frequency)) %>%
ungroup() %>%
mutate(TypeItem = item)
}
ranks <- foreach(k = items, .combine='rbind') %do%
rank_score(response_scores, k) #outputs MAUI rank table of bootstrap sample responses
response_scores <- foreach(l = items, .combine='rbind') %do%
append_scores(response_scores, ranks, l) #' appends scores
append_scores <- function(resp, rnks, item) {
ranks <- rnks %>%
filter(TypeItem == item) %>%
select(-cum_mass, -mass)
appended <- resp %>%
filter(TypeItem == item) %>%
left_join(ranks)
}
response_scores <- foreach(l = items, .combine='rbind') %do%
append_scores(response_scores, ranks, l) #' appends scores
library(foreach)
library(tidyverse)
tipi <- read_csv('data/Profiles Tall99 TIPI.csv') %>%
mutate(extroversion = (TIPI1 + TIPI6)/2,
agreeableness = (TIPI2 + TIPI7)/2,
conscientiousness = (TIPI3 + TIPI8)/2,
neuroticism = (TIPI4 + TIPI9)/2,
openness = (TIPI5 + TIPI10)/2)
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
#mutate(item = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'item', 'Std', 'Flex56')
names(responses) <- c('partID', 'TypeItem', 'Std', 'FlexCat')
items <- c('1-1', '1-2', '1-3', '2-1', '2-2', '2-3', '3-1', '3-2', '3-3')
responses_times <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(TypeItem = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'TypeItem', 'Std', 'Flex56', 'RespOrd', 'RespSec', 'ShiftCount')
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
#' takes df of responses item id
#' returns a df of response counts
sort_freq <- function(resp, item) {
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(Std) %>% #Std is file-specific
summarise(frequency = n()) %>%
ungroup() %>%
mutate(TypeItem = item)
}
#' takes df of sample responses
#' returns a df by rankwise scoring
rank_score <- function(resp, item) {
sz <- filter(responses, TypeItem == item)
size <- length(unique(sz$partID))
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = count*frequency) %>%
mutate(size = size,
cum_mass = cumsum(mass),
MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/size,
norm_rank = (rank(cum_mass) - .5)/nrow(.),
weight = mass/max(cum_mass)) %>%
arrange(desc(frequency)) %>%
ungroup() %>%
mutate(TypeItem = item)
}
p_score <- function(resp, scrs, item){
df <- resp %>%
filter(TypeItem == item) %>%
left_join(filter(scrs, TypeItem == item), by = 'Std')
totals <- df %>%
mutate(UI95 = ifelse(UI >= .95, 1, 0)) %>%
group_by(partID) %>%
summarise(sum_MAUI = sum(MAUI),
avg_MAUI = mean(MAUI),
sum_UI95 = sum(UI95),
avg_UI95 = mean(UI95)) %>%
mutate(TypeItem = item)
top_MAUI <- df %>%
group_by(partID) %>%
arrange(desc(MAUI), .by_group=TRUE) %>%
slice(seq_len(5)) %>%
summarise(top5_MAUI = sum(MAUI))
# top_pct <- df %>%
#   group_by(partID) %>%
#   arrange(pct_giving, .by_group=TRUE) %>%
#   slice(seq_len(5)) %>%
#   mutate(pct_UI = 1-pct_giving) %>%
#   summarise(top5_pct = sum(pct_UI))
totals %>%
left_join(top_MAUI, by='partID')
}
response_scores <- foreach(j = items, .combine='rbind') %do%
sort_freq(responses, j) #' returns response frequency for standardized responses in a single df
ranks <- foreach(k = items, .combine='rbind') %do%
rank_score(response_scores, k) #outputs MAUI rank table of bootstrap sample responses
append_scores <- function(resp, rnks, item) {
ranks <- rnks %>%
filter(TypeItem == item) %>%
select(-cum_mass, -mass)
appended <- resp %>%
filter(TypeItem == item) %>%
left_join(ranks)
}
response_scores <- foreach(l = items, .combine='rbind') %do%
append_scores(response_scores, ranks, l) #' appends scores
participant_scores <- foreach(m = items, .combine='rbind') %do%
p_score(responses, response_scores, m)  #' calculates participant scores
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std')) %>%
mutate(delta_MAUI = if_else(RespOrd != 1, MAUI-lag(MAUI), NA))
library(foreach)
library(tidyverse)
tipi <- read_csv('data/Profiles Tall99 TIPI.csv') %>%
mutate(extroversion = (TIPI1 + TIPI6)/2,
agreeableness = (TIPI2 + TIPI7)/2,
conscientiousness = (TIPI3 + TIPI8)/2,
neuroticism = (TIPI4 + TIPI9)/2,
openness = (TIPI5 + TIPI10)/2)
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
#mutate(item = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'item', 'Std', 'Flex56')
names(responses) <- c('partID', 'TypeItem', 'Std', 'FlexCat')
items <- c('1-1', '1-2', '1-3', '2-1', '2-2', '2-3', '3-1', '3-2', '3-3')
responses_times <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(TypeItem = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'TypeItem', 'Std', 'Flex56', 'RespOrd', 'RespSec', 'ShiftCount')
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
#' takes df of responses item id
#' returns a df of response counts
sort_freq <- function(resp, item) {
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(Std) %>% #Std is file-specific
summarise(frequency = n()) %>%
ungroup() %>%
mutate(TypeItem = item)
}
#' takes df of sample responses
#' returns a df by rankwise scoring
rank_score <- function(resp, item) {
sz <- filter(responses, TypeItem == item)
size <- length(unique(sz$partID))
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = count*frequency) %>%
mutate(size = size,
cum_mass = cumsum(mass),
MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/size,
norm_rank = (rank(cum_mass) - .5)/nrow(.),
weight = mass/max(cum_mass)) %>%
arrange(desc(frequency)) %>%
ungroup() %>%
mutate(TypeItem = item)
}
p_score <- function(resp, scrs, item){
df <- resp %>%
filter(TypeItem == item) %>%
left_join(filter(scrs, TypeItem == item), by = 'Std')
totals <- df %>%
mutate(UI95 = ifelse(UI >= .95, 1, 0)) %>%
group_by(partID) %>%
summarise(sum_MAUI = sum(MAUI),
avg_MAUI = mean(MAUI),
sum_UI95 = sum(UI95),
avg_UI95 = mean(UI95)) %>%
mutate(TypeItem = item)
top_MAUI <- df %>%
group_by(partID) %>%
arrange(desc(MAUI), .by_group=TRUE) %>%
slice(seq_len(5)) %>%
summarise(top5_MAUI = sum(MAUI))
# top_pct <- df %>%
#   group_by(partID) %>%
#   arrange(pct_giving, .by_group=TRUE) %>%
#   slice(seq_len(5)) %>%
#   mutate(pct_UI = 1-pct_giving) %>%
#   summarise(top5_pct = sum(pct_UI))
totals %>%
left_join(top_MAUI, by='partID')
}
response_scores <- foreach(j = items, .combine='rbind') %do%
sort_freq(responses, j) #' returns response frequency for standardized responses in a single df
ranks <- foreach(k = items, .combine='rbind') %do%
rank_score(response_scores, k) #outputs MAUI rank table of bootstrap sample responses
append_scores <- function(resp, rnks, item) {
ranks <- rnks %>%
filter(TypeItem == item) %>%
select(-cum_mass, -mass)
appended <- resp %>%
filter(TypeItem == item) %>%
left_join(ranks)
}
response_scores <- foreach(l = items, .combine='rbind') %do%
append_scores(response_scores, ranks, l) #' appends scores
participant_scores <- foreach(m = items, .combine='rbind') %do%
p_score(responses, response_scores, m)  #' calculates participant scores
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std')) %>%
mutate(delta_MAUI = if_else(RespOrd != 1, MAUI-lag(MAUI), NA))
library(foreach)
library(tidyverse)
tipi <- read_csv('data/Profiles Tall99 TIPI.csv') %>%
mutate(extroversion = (TIPI1 + TIPI6)/2,
agreeableness = (TIPI2 + TIPI7)/2,
conscientiousness = (TIPI3 + TIPI8)/2,
neuroticism = (TIPI4 + TIPI9)/2,
openness = (TIPI5 + TIPI10)/2)
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
#mutate(item = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'item', 'Std', 'Flex56')
names(responses) <- c('partID', 'TypeItem', 'Std', 'FlexCat')
items <- c('1-1', '1-2', '1-3', '2-1', '2-2', '2-3', '3-1', '3-2', '3-3')
responses_times <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(TypeItem = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'TypeItem', 'Std', 'Flex56', 'RespOrd', 'RespSec', 'ShiftCount')
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
#' takes df of responses item id
#' returns a df of response counts
sort_freq <- function(resp, item) {
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(Std) %>% #Std is file-specific
summarise(frequency = n()) %>%
ungroup() %>%
mutate(TypeItem = item)
}
#' takes df of sample responses
#' returns a df by rankwise scoring
rank_score <- function(resp, item) {
sz <- filter(responses, TypeItem == item)
size <- length(unique(sz$partID))
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = count*frequency) %>%
mutate(size = size,
cum_mass = cumsum(mass),
MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/size,
norm_rank = (rank(cum_mass) - .5)/nrow(.),
weight = mass/max(cum_mass)) %>%
arrange(desc(frequency)) %>%
ungroup() %>%
mutate(TypeItem = item)
}
p_score <- function(resp, scrs, item){
df <- resp %>%
filter(TypeItem == item) %>%
left_join(filter(scrs, TypeItem == item), by = 'Std')
totals <- df %>%
mutate(UI95 = ifelse(UI >= .95, 1, 0)) %>%
group_by(partID) %>%
summarise(sum_MAUI = sum(MAUI),
avg_MAUI = mean(MAUI),
sum_UI95 = sum(UI95),
avg_UI95 = mean(UI95)) %>%
mutate(TypeItem = item)
top_MAUI <- df %>%
group_by(partID) %>%
arrange(desc(MAUI), .by_group=TRUE) %>%
slice(seq_len(5)) %>%
summarise(top5_MAUI = sum(MAUI))
# top_pct <- df %>%
#   group_by(partID) %>%
#   arrange(pct_giving, .by_group=TRUE) %>%
#   slice(seq_len(5)) %>%
#   mutate(pct_UI = 1-pct_giving) %>%
#   summarise(top5_pct = sum(pct_UI))
totals %>%
left_join(top_MAUI, by='partID')
}
response_scores <- foreach(j = items, .combine='rbind') %do%
sort_freq(responses, j) #' returns response frequency for standardized responses in a single df
responses <- read_csv('data/Profiles Tall99 responses.csv')
library(foreach)
library(tidyverse)
tipi <- read_csv('data/Profiles Tall99 TIPI.csv') %>%
mutate(extroversion = (TIPI1 + TIPI6)/2,
agreeableness = (TIPI2 + TIPI7)/2,
conscientiousness = (TIPI3 + TIPI8)/2,
neuroticism = (TIPI4 + TIPI9)/2,
openness = (TIPI5 + TIPI10)/2)
responses <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(item = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'item', 'Std', 'Flex56')
names(responses) <- c('partID', 'TypeItem', 'Std', 'FlexCat')
items <- c('1-1', '1-2', '1-3', '2-1', '2-2', '2-3', '3-1', '3-2', '3-3')
responses_times <- read_csv('data/Profiles Tall99 responses.csv') %>%
mutate(TypeItem = paste(Type, ItemOrd, sep = "-")) %>%
select('partID', 'TypeItem', 'Std', 'Flex56', 'RespOrd', 'RespSec', 'ShiftCount')
comb <- function(x, ...) {
lapply(seq_along(x),
function(i) c(x[[i]], lapply(list(...), function(y) y[[i]])))
}
#' takes df of responses item id
#' returns a df of response counts
sort_freq <- function(resp, item) {
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(Std) %>% #Std is file-specific
summarise(frequency = n()) %>%
ungroup() %>%
mutate(TypeItem = item)
}
#' takes df of sample responses
#' returns a df by rankwise scoring
rank_score <- function(resp, item) {
sz <- filter(responses, TypeItem == item)
size <- length(unique(sz$partID))
resp %>%
filter(TypeItem == item) %>% #TypeItem is file-specific
group_by(frequency) %>%
summarise(count = n()) %>%
arrange(desc(frequency)) %>%
mutate(mass = count*frequency) %>%
mutate(size = size,
cum_mass = cumsum(mass),
MAUI = (cum_mass - mass/2)/max(cum_mass),
UI = 1 - frequency/size,
norm_rank = (rank(cum_mass) - .5)/nrow(.),
weight = mass/max(cum_mass)) %>%
arrange(desc(frequency)) %>%
ungroup() %>%
mutate(TypeItem = item)
}
p_score <- function(resp, scrs, item){
df <- resp %>%
filter(TypeItem == item) %>%
left_join(filter(scrs, TypeItem == item), by = 'Std')
totals <- df %>%
mutate(UI95 = ifelse(UI >= .95, 1, 0)) %>%
group_by(partID) %>%
summarise(sum_MAUI = sum(MAUI),
avg_MAUI = mean(MAUI),
sum_UI95 = sum(UI95),
avg_UI95 = mean(UI95)) %>%
mutate(TypeItem = item)
top_MAUI <- df %>%
group_by(partID) %>%
arrange(desc(MAUI), .by_group=TRUE) %>%
slice(seq_len(5)) %>%
summarise(top5_MAUI = sum(MAUI))
# top_pct <- df %>%
#   group_by(partID) %>%
#   arrange(pct_giving, .by_group=TRUE) %>%
#   slice(seq_len(5)) %>%
#   mutate(pct_UI = 1-pct_giving) %>%
#   summarise(top5_pct = sum(pct_UI))
totals %>%
left_join(top_MAUI, by='partID')
}
response_scores <- foreach(j = items, .combine='rbind') %do%
sort_freq(responses, j) #' returns response frequency for standardized responses in a single df
ranks <- foreach(k = items, .combine='rbind') %do%
rank_score(response_scores, k) #outputs MAUI rank table of bootstrap sample responses
append_scores <- function(resp, rnks, item) {
ranks <- rnks %>%
filter(TypeItem == item) %>%
select(-cum_mass, -mass)
appended <- resp %>%
filter(TypeItem == item) %>%
left_join(ranks)
}
response_scores <- foreach(l = items, .combine='rbind') %do%
append_scores(response_scores, ranks, l) #' appends scores
participant_scores <- foreach(m = items, .combine='rbind') %do%
p_score(responses, response_scores, m)  #' calculates participant scores
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std')) %>%
mutate(delta_MAUI = if_else(RespOrd != 1, MAUI-lag(MAUI), NA))
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std'))
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std')) %>%
mutate(delta_MAUI = if_else(RespOrd != 1, MAUI-lag(MAUI), NA))
View(responses_times)
View(responses_times)
View(response_scores)
View(resp_time_scores)
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std')) %>%
mutate(delta_MAUI = if_else(RespOrd == 1, NA, MAUI-lag(MAUI)))
`rlang::last_error()`
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std')) %>%
mutate(delta_MAUI = if_else(RespOrd == 1, NA, MAUI-lag(MAUI)))
`rlang::last_error()`
rlang::last_error()
resp_time_scores <- responses_times %>%
left_join(response_scores, by = c('TypeItem', 'Std')) %>%
mutate(delta_MAUI = if_else(RespOrd == 1, NA_real_, MAUI-lag(MAUI)))
View(resp_time_scores)
participant_deltas <- resp_time_scores %>%
group_by(partID) %>%
summarise(mean_delta = mean(delta_MAUI, na.rm = TRUE))
View(participant_deltas)
participant_deltas <- resp_time_scores %>%
group_by(partID) %>%
summarise(total_shifts = sum(ShiftCount),
mean_delta = mean(delta_MAUI, na.rm = TRUE),
var_delta = var(delta_MAUI, na.rm= TRUE))
participant_deltas <- resp_time_scores %>%
group_by(partID) %>%
summarise(total_shifts = sum(ShiftCount),
mean_delta = mean(delta_MAUI, na.rm = TRUE),
var_delta = var(delta_MAUI, na.rm= TRUE),
fluency = n())
ggplot(participant_deltas, aes(fluency, mean_delta)) +
geom_smooth(method = 'lm')
library(ggplot2)
ggplot(participant_deltas, aes(fluency, mean_delta)) +
geom_smooth(method = 'lm')
ggplot(participant_deltas, aes(fluency, var_delta)) +
geom_smooth(method = 'lm')
ggplot(participant_deltas, aes(total_shifts, mean_delta)) +
geom_smooth(method = 'lm')
ggplot(participant_deltas, aes(total_shifts, var_delta)) +
geom_smooth(method = 'lm')
ggplot(participant_deltas, aes(total_shifts, fluency)) +
geom_smooth(method = 'lm')
ggplot(participant_deltas, aes(mean_delta, var_delta)) +
geom_smooth(method = 'lm')
ggplot(participant_deltas, aes(fluency, mean_delta)) +
geom_jitter()
ggplot(resp_time_scores, aes(RespOrd, mean_delta)) +
geom_jitter()
ggplot(resp_time_scores, aes(RespOrd, delta_MAUI)) +
geom_jitter()
ggplot(resp_time_scores, aes(RespOrd, delta_MAUI)) +
geom_smooth(method='lm')
ggplot(resp_time_scores, aes(RespOrd, MAUI)) +
geom_smooth(method='lm')
ggplot(resp_time_scores, aes(RespOrd, MAUI)) +
geom_jitter()
ggplot(resp_time_scores, aes(RespOrd, UI)) +
geom_smooth(method='lm')
ggplot(resp_time_scores, aes(RespOrd, UI)) +
geom_smooth(method='lm') +
ylim(0,1)
ggplot(resp_time_scores, aes(RespOrd, MAUI)) +
geom_jitter() +
ylim(0,1)
ggplot(resp_time_scores, aes(RespOrd, MAUI)) +
geom_smooth(method = 'lm') +
ylim(0,1)
ggplot(resp_time_scores, aes(RespOrd, MAUI)) +
geom_jitter() +
ylim(0,1)
ggplot(resp_time_scores, aes(RespOrd, MAUI, colour = ShiftCount)) +
geom_jitter() +
ylim(0,1)
ggplot(resp_time_scores, aes(RespOrd, delta_MAUI, colour = ShiftCount)) +
geom_jitter() +
ylim(0,1)
ggplot(resp_time_scores, aes(RespOrd, UI)) +
geom_jitter() +
ylim(0,1)
ggplot(resp_time_scores, aes(MAUI, delta_MAUI)) +
geom_jitter() +
ylim(0,1)
ggplot(resp_time_scores, aes(MAUI, delta_MAUI)) +
geom_jitter()
ggplot(resp_time_scores, aes(MAUI, delta_MAUI)) +
geom_smooth(method = 'lm')
ggplot(resp_time_scores, aes(MAUI, delta_MAUI)) +
geom_smooth(method = 'lm', group = ShiftCount)
ggplot(resp_time_scores, aes(MAUI, delta_MAUI)) +
geom_smooth(method = 'lm', group = 'ShiftCount')
ggplot(resp_time_scores, aes(MAUI, delta_MAUI)) +
geom_smooth(method = 'lm', aes(group = 'ShiftCount'))
ggplot(resp_time_scores, aes(MAUI, delta_MAUI)) +
geom_smooth(method = 'lm', aes(group = ShiftCount))
ggplot(resp_time_scores, aes(MAUI, delta_MAUI, group = ShiftCount)) +
geom_smooth(method = 'lm')
View(response_scores)
View(ranks)
ggplot(response_scores, aes(TypeItem, UI)) +
geom_dotplot()
ggplot(response_scores, aes(TypeItem, UI)) +
geom_dotplot(binaxis = 'y', stackdir = 'center')
ggplot(response_scores, aes(TypeItem, UI, color = TypeItem)) +
geom_dotplot(binaxis = 'y', stackdir = 'center')
ggplot(response_scores, aes(TypeItem, MAUI, color = TypeItem)) +
geom_dotplot(binaxis = 'y', stackdir = 'center')
ggplot(response_scores, aes(TypeItem, MAUI, color = TypeItem, size = frequency)) +
geom_dotplot(binaxis = 'y', stackdir = 'center')
ggplot(response_scores, aes(TypeItem, UI, color = TypeItem, size = frequency)) +
geom_dotplot(binaxis = 'y', stackdir = 'center')
